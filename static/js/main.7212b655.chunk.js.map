{"version":3,"sources":["DataFetching.js","StepContext.js","Components/Userdetails.js","Components/Personaldetails.js","Components/Addressdetails.js","Components/Success.js","App.js","serviceWorker.js","index.js"],"names":["DataFetching","useState","posts","setPosts","useEffect","axios","get","then","res","console","log","data","catch","err","map","post","key","id","title","multiStepContext","React","createContext","StepContext","currentStep","setStep","userData","setUserData","finalData","setFinalData","Provider","value","Userdetails","useContext","TextField","label","onChange","e","target","margin","variant","color","Button","onClick","style","Personaldetails","Addressdetails","submitData","Success","AppBar","App","className","fontFamily","Stepper","width","background","activeStep","orientation","Step","StepLabel","class","step","showStep","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7212b655.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction DataFetching() {\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => {\r\n            console.log(res)\r\n            setPosts(res.data)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <ol>\r\n                {\r\n                    posts.map(post => \r\n                        (<li key={post.id}>{post.title}</li>\r\n                            ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataFetching\r\n","import React , { useState } from 'react';\r\nimport App from './App';\r\nexport const multiStepContext = React.createContext();\r\n\r\nconst StepContext = () => {\r\n const [currentStep, setStep] = useState(1);\r\n const [userData, setUserData] = useState([]);\r\n const [finalData, setFinalData] = useState([]);\r\n    return (\r\n        <div>\r\n            <multiStepContext.Provider \r\n            value={{currentStep, setStep , userData, setUserData, finalData, setFinalData}}>\r\n            <App />\r\n            </multiStepContext.Provider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepContext;\r\n","import React, {useContext} from 'react';\r\nimport {Button, TextField} from '@material-ui/core';\r\nimport {multiStepContext} from '../StepContext';\r\n\r\n\r\nfunction Userdetails() {\r\n    const {setStep, userData, setUserData} = useContext(multiStepContext);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField label=\"First name\" value={userData['firstname']} onChange={(e) => setUserData({...userData, \"firstname\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <TextField label=\"Middle name\" value={userData['middlename']} onChange={(e) => setUserData({...userData, \"middlename\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                 <TextField label=\"Last name\" value={userData['lastname']} onChange={(e) => setUserData({...userData, \"lastname\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                 <Button onClick={() => setStep(2)} variant=\"contained\" color=\"primary\" style={{margin: \"30px\"}}>Next</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Userdetails;\r\n","import React , { useContext }from 'react';\r\nimport {Button, TextField} from '@material-ui/core';\r\nimport {multiStepContext} from '../StepContext';\r\n\r\n\r\nfunction Personaldetails() {\r\n    const {setStep, userData, setUserData} = useContext(multiStepContext);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField label=\"Email Id\" value={userData['emailId']} onChange={(e) => setUserData({...userData, \"emailId\": e.target.value})}margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <TextField label=\"Country\" value={userData['countryname']} onChange={(e) => setUserData({...userData, \"countryname\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <TextField label=\"Contact Number\" value={userData['contact']} onChange={(e) => setUserData({...userData, \"contact\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <Button variant=\"contained\" onClick={() => setStep(3)} color=\"primary\" style={{margin: \"30px\"}}>Next</Button>\r\n                <Button variant=\"contained\" onClick={() => setStep(1)} color=\"secondary\" style={{margin: \"30px\"}}>Back</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Personaldetails;\r\n","import React, {useContext} from 'react';\r\nimport {Button, TextField} from '@material-ui/core';\r\nimport {multiStepContext} from '../StepContext';\r\n\r\n\r\n\r\nfunction Addressdetails() {\r\n    const {setStep, userData, setUserData, submitData} = useContext(multiStepContext);\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField label=\"City name\" value={userData['cityname']} onChange={(e) => setUserData({...userData, \"cityname\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <TextField label=\"Landmark name\" value={userData['landmarkname']} onChange={(e) => setUserData({...userData, \"landmarkname\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <TextField label=\"Postal code name\" value={userData['postalcode']} onChange={(e) => setUserData({...userData, \"postalcode\": e.target.value})} margin=\"normal\" variant=\"outlined\" color=\"secondary\" />\r\n            </div>\r\n            <div>\r\n                <Button variant=\"contained\" onClick={() => setStep(2)} color=\"secondary\" style={{margin: \"30px\"}}>Back</Button>\r\n                <Button variant=\"contained\" onClick={() => setStep(4)} color=\"primary\" style={{margin: \"30px\"}}>Submit</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addressdetails;\r\n","import React, { Component } from 'react'\r\nimport { AppBar } from '@material-ui/core'\r\n\r\nfunction Success() {\r\n    return (\r\n        <div>\r\n            <AppBar title=\"Success\" />\r\n            <h1>Thank You For Submitting Details!</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Success;\r\n","import React, { useContext } from 'react';\n\nimport './App.css';\nimport DataFetching from './DataFetching';\nimport Userdetails from './Components/Userdetails';\nimport Personaldetails from './Components/Personaldetails';\nimport Addressdetails from './Components/Addressdetails';  \nimport Success from './Components/Success'; \nimport { Stepper, StepLabel, Step} from '@material-ui/core';\nimport { multiStepContext } from './StepContext';\nfunction App() {\n\n  const { currentStep, finalData} = useContext(multiStepContext);\n    function showStep(step){\n      console.log(step);\n      switch(step){\n        case 1: \n            return <Userdetails />\n        case 2:\n            return <Personaldetails />\n        case 3:\n            return <Addressdetails /> \n            case 4: \n            return <Success />    \n      }\n    }\n    \n  return (\n    <div className=\"App\">\n    \n        <h1> TASK 1</h1>\n        <h3 style={{color: \"blue\", fontFamily: \"Arial\"}}> ReactJs Multistep Form Application</h3>\n        \n        <div className=\"center-stepper App-header task1\" >\n            <Stepper style={{width: \"18%\", background: \"orange\"}} activeStep={currentStep - 1} orientation=\"horizontal\">\n                <Step>\n                  <StepLabel></StepLabel>\n                </Step>\n                <Step>\n                  <StepLabel></StepLabel>\n                </Step>\n                <Step>\n                  <StepLabel></StepLabel>\n                </Step>\n            </Stepper>\n        </div>\n        <div class=\"task1\">\n        { showStep(currentStep)}\n        </div>\n      \n      <br/><br/>\n    <h1> TASK 3</h1>\n      <DataFetching />\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport StepContext from './StepContext';\n\nReactDOM.render(\n  <StepContext>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </StepContext>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}